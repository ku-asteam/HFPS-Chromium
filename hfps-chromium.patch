diff --git base/BUILD.gn base/BUILD.gn
index 67d622c..44312618 100644
--- base/BUILD.gn
+++ base/BUILD.gn
@@ -622,6 +622,8 @@ jumbo_component("base") {
     "pending_task.h",
     "pickle.cc",
     "pickle.h",
+    #"mobed/frame_counter.cc", # MOBED
+    #"mobed/frame_counter.h", # MOBED
     "posix/eintr_wrapper.h",
     "posix/file_descriptor_shuffle.cc",
     "posix/file_descriptor_shuffle.h",
diff --git cc/trees/layer_tree_host_impl.cc cc/trees/layer_tree_host_impl.cc
index ad17e57..500b0d9 100644
--- cc/trees/layer_tree_host_impl.cc
+++ cc/trees/layer_tree_host_impl.cc
@@ -96,6 +96,11 @@
 #include "ui/gfx/geometry/size_conversions.h"
 #include "ui/gfx/geometry/vector2d_conversions.h"
 
+// MOBED
+//#include "base/mobed/frame_counter.h"
+#include <fstream>
+#include <iostream>
+
 namespace cc {
 namespace {
 
@@ -1824,6 +1829,12 @@ bool LayerTreeHostImpl::DrawLayers(FrameData* frame) {
 
   memory_history_->SaveEntry(tile_manager_.memory_stats_from_last_assign());
 
+  // MOBED
+  //MobedFrame::counts++;
+  FILE *proc_file = fopen("/proc/chromium", "w");
+  fprintf(proc_file, "*\n");
+  fclose(proc_file);
+
   if (debug_state_.ShowHudRects()) {
     debug_rect_history_->SaveDebugRectsForCurrentFrame(
         active_tree(), active_tree_->hud_layer(), *frame->render_surface_list,
diff --git third_party/WebKit/Source/core/dom/DocumentTiming.cpp third_party/WebKit/Source/core/dom/DocumentTiming.cpp
index 5122acc..004b912 100644
--- third_party/WebKit/Source/core/dom/DocumentTiming.cpp
+++ third_party/WebKit/Source/core/dom/DocumentTiming.cpp
@@ -9,8 +9,17 @@
 #include "core/loader/InteractiveDetector.h"
 #include "platform/instrumentation/tracing/TraceEvent.h"
 
-namespace blink {
+// MOBED START
+#include <fstream>
+#include <iostream>
+//#include "base/mobed/frame_counter.h"
+#define BUF_MAX 10000
+
+extern char proc_buffer[BUF_MAX]; // MOBED
+extern FILE *proc_file;
+// MOBED END
 
+namespace blink {
 DocumentTiming::DocumentTiming(Document& document) : document_(document) {}
 
 void DocumentTiming::Trace(blink::Visitor* visitor) {
@@ -32,6 +41,20 @@ void DocumentTiming::MarkDomLoading() {
                                    TraceEvent::ToTraceTimestamp(dom_loading_),
                                    "frame", GetFrame());
   NotifyDocumentTimingChanged();
+
+  /*
+  // MOBED
+  if (proc_file != NULL) {
+    fprintf(proc_file, "%s\n", proc_buffer);
+	fclose(proc_file);
+  }
+
+  memset(proc_buffer, 0, BUF_MAX);
+  proc_file = fopen("/proc/chromium", "w");
+
+  */
+  sprintf(proc_buffer + strlen(proc_buffer), "domLoading %f\n", dom_loading_);
+  //MobedFrame::counts += 10; 
 }
 
 void DocumentTiming::MarkDomInteractive() {
@@ -40,6 +63,10 @@ void DocumentTiming::MarkDomInteractive() {
       "blink.user_timing,rail", "domInteractive",
       TraceEvent::ToTraceTimestamp(dom_interactive_), "frame", GetFrame());
   NotifyDocumentTimingChanged();
+
+  // MOBED
+  sprintf(proc_buffer + strlen(proc_buffer), "domInteractive %f\n", dom_interactive_);
+
 }
 
 void DocumentTiming::MarkDomContentLoadedEventStart() {
@@ -49,6 +76,9 @@ void DocumentTiming::MarkDomContentLoadedEventStart() {
       TraceEvent::ToTraceTimestamp(dom_content_loaded_event_start_), "frame",
       GetFrame());
   NotifyDocumentTimingChanged();
+
+  // MOBED
+  sprintf(proc_buffer + strlen(proc_buffer), "domContentLoadedEventStart %f\n", dom_content_loaded_event_start_);
 }
 
 void DocumentTiming::MarkDomContentLoadedEventEnd() {
@@ -63,6 +93,10 @@ void DocumentTiming::MarkDomContentLoadedEventEnd() {
     interactive_detector->OnDomContentLoadedEnd(dom_content_loaded_event_end_);
   }
   NotifyDocumentTimingChanged();
+
+  // MOBED
+  sprintf(proc_buffer + strlen(proc_buffer), "domContentLoadedEventEnd %f\n", dom_content_loaded_event_end_);
+  
 }
 
 void DocumentTiming::MarkDomComplete() {
@@ -71,6 +105,17 @@ void DocumentTiming::MarkDomComplete() {
                                    TraceEvent::ToTraceTimestamp(dom_complete_),
                                    "frame", GetFrame());
   NotifyDocumentTimingChanged();
+
+  // MOBED
+  sprintf(proc_buffer + strlen(proc_buffer), "domComplete %f\n", dom_complete_);
+
+  /*
+  if (proc_file != NULL) {
+    fprintf(proc_file, "%s\n", proc_buffer);
+    fclose(proc_file);
+	memset(proc_buffer, 0, BUF_MAX);
+  }
+  */
 }
 
 void DocumentTiming::MarkFirstLayout() {
@@ -79,6 +124,9 @@ void DocumentTiming::MarkFirstLayout() {
                                    TraceEvent::ToTraceTimestamp(first_layout_),
                                    "frame", GetFrame());
   NotifyDocumentTimingChanged();
+
+  // MOBED
+  sprintf(proc_buffer + strlen(proc_buffer), "firstLayout %f\n", first_layout_);
 }
 
 }  // namespace blink
diff --git third_party/WebKit/Source/core/loader/DocumentLoadTiming.cpp third_party/WebKit/Source/core/loader/DocumentLoadTiming.cpp
index 01d611d4..740399c 100644
--- third_party/WebKit/Source/core/loader/DocumentLoadTiming.cpp
+++ third_party/WebKit/Source/core/loader/DocumentLoadTiming.cpp
@@ -23,6 +23,11 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
+ /*
+  * Modified by Park, Seonghoon (shpark@mobed.yonsei.ac.kr)
+  * 
+  */
+
 #include "core/loader/DocumentLoadTiming.h"
 
 #include "base/memory/scoped_refptr.h"
@@ -30,8 +35,20 @@
 #include "platform/instrumentation/tracing/TraceEvent.h"
 #include "platform/weborigin/SecurityOrigin.h"
 
+// MOBED START
+//#include "base/mobed/frame_counter.h"
+#include <fstream>
+#include <iostream>
+
+#define BUF_MAX 10000
+
+char proc_buffer[BUF_MAX];
+FILE *proc_file = NULL;
+
+// MOBED END
 namespace blink {
 
+
 DocumentLoadTiming::DocumentLoadTiming(DocumentLoader& document_loader)
     : reference_monotonic_time_(0.0),
       reference_wall_time_(0.0),
@@ -116,6 +133,7 @@ void DocumentLoadTiming::SetNavigationStart(double navigation_start) {
   // been set yet in order to have a valid reference time in both units.
   EnsureReferenceTimesSet();
   navigation_start_ = navigation_start;
+
   TRACE_EVENT_MARK_WITH_TIMESTAMP1(
       "blink.user_timing", "navigationStart",
       TraceEvent::ToTraceTimestamp(navigation_start_), "frame", GetFrame());
@@ -126,6 +144,21 @@ void DocumentLoadTiming::SetNavigationStart(double navigation_start) {
   reference_wall_time_ = MonotonicTimeToPseudoWallTime(navigation_start);
   reference_monotonic_time_ = navigation_start;
   NotifyDocumentTimingChanged();
+
+  // MOBED
+  if (proc_file != NULL) {
+    fprintf(proc_file, "%s", proc_buffer);
+    fclose(proc_file);
+  }
+  memset(proc_buffer, 0, BUF_MAX);
+  proc_file = fopen("/proc/chromium", "w");
+  fprintf(proc_file, "start\n");
+  fclose(proc_file);
+
+  proc_file = fopen("/proc/chromium", "w");
+  sprintf(proc_buffer + strlen(proc_buffer), "navigationStart %f\n", navigation_start);
+
+//  mobed_frame_counts = 0;
 }
 
 void DocumentLoadTiming::AddRedirect(const KURL& redirecting_url,
@@ -151,6 +184,9 @@ void DocumentLoadTiming::SetRedirectStart(double redirect_start) {
       "blink.user_timing", "redirectStart",
       TraceEvent::ToTraceTimestamp(redirect_start_), "frame", GetFrame());
   NotifyDocumentTimingChanged();
+
+  // MOBED
+  sprintf(proc_buffer + strlen(proc_buffer), "redirectStart %f\n", redirect_start);
 }
 
 void DocumentLoadTiming::SetRedirectEnd(double redirect_end) {
@@ -159,6 +195,9 @@ void DocumentLoadTiming::SetRedirectEnd(double redirect_end) {
                                    TraceEvent::ToTraceTimestamp(redirect_end_),
                                    "frame", GetFrame());
   NotifyDocumentTimingChanged();
+  
+  // MOBED
+  sprintf(proc_buffer + strlen(proc_buffer), "redirectEnd %f\n", redirect_end);
 }
 
 void DocumentLoadTiming::MarkUnloadEventStart(double start_time) {
@@ -167,6 +206,7 @@ void DocumentLoadTiming::MarkUnloadEventStart(double start_time) {
                                    TraceEvent::ToTraceTimestamp(start_time),
                                    "frame", GetFrame());
   NotifyDocumentTimingChanged();
+  sprintf(proc_buffer + strlen(proc_buffer), "unloadEventStart %f\n", start_time);
 }
 
 void DocumentLoadTiming::MarkUnloadEventEnd(double end_time) {
@@ -175,6 +215,10 @@ void DocumentLoadTiming::MarkUnloadEventEnd(double end_time) {
                                    TraceEvent::ToTraceTimestamp(end_time),
                                    "frame", GetFrame());
   NotifyDocumentTimingChanged();
+
+  // MOBED
+  sprintf(proc_buffer + strlen(proc_buffer), "unloadEventEnd %f\n", end_time);
+  
 }
 
 void DocumentLoadTiming::MarkFetchStart() {
@@ -187,6 +231,9 @@ void DocumentLoadTiming::SetFetchStart(double fetch_start) {
                                    TraceEvent::ToTraceTimestamp(fetch_start_),
                                    "frame", GetFrame());
   NotifyDocumentTimingChanged();
+
+  // MOBED
+  sprintf(proc_buffer + strlen(proc_buffer), "fetchStart %f\n", fetch_start);
 }
 
 void DocumentLoadTiming::SetResponseEnd(double response_end) {
@@ -195,6 +242,10 @@ void DocumentLoadTiming::SetResponseEnd(double response_end) {
                                    TraceEvent::ToTraceTimestamp(response_end_),
                                    "frame", GetFrame());
   NotifyDocumentTimingChanged();
+
+  // MOBED
+  sprintf(proc_buffer + strlen(proc_buffer), "responseEnd %f\n", response_end);
+  
 }
 
 void DocumentLoadTiming::MarkLoadEventStart() {
@@ -203,6 +254,10 @@ void DocumentLoadTiming::MarkLoadEventStart() {
       "blink.user_timing", "loadEventStart",
       TraceEvent::ToTraceTimestamp(load_event_start_), "frame", GetFrame());
   NotifyDocumentTimingChanged();
+
+  // MOBED
+  sprintf(proc_buffer + strlen(proc_buffer), "loadEventStart %f\n", load_event_start_);
+
 }
 
 void DocumentLoadTiming::MarkLoadEventEnd() {
@@ -211,6 +266,16 @@ void DocumentLoadTiming::MarkLoadEventEnd() {
       "blink.user_timing", "loadEventEnd",
       TraceEvent::ToTraceTimestamp(load_event_end_), "frame", GetFrame());
   NotifyDocumentTimingChanged();
+
+  // MOBED
+  sprintf(proc_buffer + strlen(proc_buffer), "loadEventEnd %f\n", load_event_end_);
+  //sprintf(proc_buffer + strlen(proc_buffer), "frameCount %d\n", MobedFrame::counts);
+  //  mobed_frame_counts = 0;
+  if (proc_file != NULL) {
+    fprintf(proc_file, "%s", proc_buffer);
+	fclose(proc_file);
+	memset(proc_buffer, 0, BUF_MAX);
+  }
 }
 
 void DocumentLoadTiming::MarkRedirectEnd() {
@@ -219,6 +284,9 @@ void DocumentLoadTiming::MarkRedirectEnd() {
                                    TraceEvent::ToTraceTimestamp(redirect_end_),
                                    "frame", GetFrame());
   NotifyDocumentTimingChanged();
+
+  // MOBED
+  sprintf(proc_buffer + strlen(proc_buffer), "redirectEnd %f\n", redirect_end_);
 }
 
 }  // namespace blink
diff --git third_party/WebKit/Source/core/timing/PerformanceTiming.cpp third_party/WebKit/Source/core/timing/PerformanceTiming.cpp
index 1a7b08f..1839284 100644
--- third_party/WebKit/Source/core/timing/PerformanceTiming.cpp
+++ third_party/WebKit/Source/core/timing/PerformanceTiming.cpp
@@ -46,9 +46,23 @@
 #include "platform/loader/fetch/ResourceLoadTiming.h"
 #include "platform/loader/fetch/ResourceResponse.h"
 
+// MOBED START
+/*
+#include <fstream>
+#include <iostream>
+
+#define BUF_MAX 10000
+// MOBED END
+*/
+
+using namespace std;
+
 // Legacy support for NT1(https://www.w3.org/TR/navigation-timing/).
 namespace blink {
 
+// MOBED
+//static char proc_buffer[BUF_MAX];
+
 static unsigned long long ToIntegerMilliseconds(double seconds) {
   DCHECK_GE(seconds, 0);
   double clamped_seconds = PerformanceBase::ClampTimeResolution(seconds);
@@ -67,7 +81,20 @@ unsigned long long PerformanceTiming::navigationStart() const {
   if (!timing)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(timing->NavigationStart());
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->NavigationStart());
+
+  // MOBED
+/*
+  FILE *proc_file = fopen("/proc/chromium", "w");
+  fprintf(proc_file, "%s\n", proc_buffer);
+  fclose(proc_file);
+
+  memset(proc_buffer, 0, BUF_MAX);
+
+  sprintf(proc_buffer+strlen(proc_buffer), "navigationStart %llu\n", ans);
+*/ 
+ return ans;
+
 }
 
 unsigned long long PerformanceTiming::unloadEventStart() const {
@@ -79,7 +106,11 @@ unsigned long long PerformanceTiming::unloadEventStart() const {
       !timing->HasSameOriginAsPreviousDocument())
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(timing->UnloadEventStart());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->UnloadEventStart());
+  //sprintf(proc_buffer+strlen(proc_buffer), "unloadEventStart %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::unloadEventEnd() const {
@@ -91,7 +122,11 @@ unsigned long long PerformanceTiming::unloadEventEnd() const {
       !timing->HasSameOriginAsPreviousDocument())
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(timing->UnloadEventEnd());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->UnloadEventEnd());
+  //sprintf(proc_buffer+strlen(proc_buffer), "unloadEventEnd %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::redirectStart() const {
@@ -102,7 +137,11 @@ unsigned long long PerformanceTiming::redirectStart() const {
   if (timing->HasCrossOriginRedirect())
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(timing->RedirectStart());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->RedirectStart());
+  //sprintf(proc_buffer+strlen(proc_buffer), "redirectStart %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::redirectEnd() const {
@@ -113,7 +152,11 @@ unsigned long long PerformanceTiming::redirectEnd() const {
   if (timing->HasCrossOriginRedirect())
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(timing->RedirectEnd());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->RedirectEnd());
+  //sprintf(proc_buffer+strlen(proc_buffer), "redirectEnd %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::fetchStart() const {
@@ -121,7 +164,11 @@ unsigned long long PerformanceTiming::fetchStart() const {
   if (!timing)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(timing->FetchStart());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->FetchStart());
+  //sprintf(proc_buffer+strlen(proc_buffer), "fetchStart %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::domainLookupStart() const {
@@ -136,7 +183,11 @@ unsigned long long PerformanceTiming::domainLookupStart() const {
   if (dns_start == 0.0)
     return fetchStart();
 
-  return MonotonicTimeToIntegerMilliseconds(dns_start);
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(dns_start);
+  //sprintf(proc_buffer+strlen(proc_buffer), "domainLookupStart %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::domainLookupEnd() const {
@@ -151,7 +202,11 @@ unsigned long long PerformanceTiming::domainLookupEnd() const {
   if (dns_end == 0.0)
     return domainLookupStart();
 
-  return MonotonicTimeToIntegerMilliseconds(dns_end);
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(dns_end);
+  //sprintf(proc_buffer+strlen(proc_buffer), "domainLookupEnd %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::connectStart() const {
@@ -176,7 +231,11 @@ unsigned long long PerformanceTiming::connectStart() const {
   if (timing->DnsEnd() > 0.0 && timing->DnsEnd() > connect_start)
     connect_start = timing->DnsEnd();
 
-  return MonotonicTimeToIntegerMilliseconds(connect_start);
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(connect_start);
+  //sprintf(proc_buffer+strlen(proc_buffer), "connectStart %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::connectEnd() const {
@@ -195,7 +254,11 @@ unsigned long long PerformanceTiming::connectEnd() const {
   if (connect_end == 0.0 || loader->GetResponse().ConnectionReused())
     return connectStart();
 
-  return MonotonicTimeToIntegerMilliseconds(connect_end);
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(connect_end);
+  //sprintf(proc_buffer+strlen(proc_buffer), "connectEnd %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::secureConnectionStart() const {
@@ -211,7 +274,11 @@ unsigned long long PerformanceTiming::secureConnectionStart() const {
   if (ssl_start == 0.0)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(ssl_start);
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(ssl_start);
+  //sprintf(proc_buffer+strlen(proc_buffer), "secureConnectionStart %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::requestStart() const {
@@ -220,7 +287,11 @@ unsigned long long PerformanceTiming::requestStart() const {
   if (!timing || timing->SendStart() == 0.0)
     return connectEnd();
 
-  return MonotonicTimeToIntegerMilliseconds(timing->SendStart());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->SendStart());
+  //sprintf(proc_buffer+strlen(proc_buffer), "requestStart %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::responseStart() const {
@@ -228,13 +299,17 @@ unsigned long long PerformanceTiming::responseStart() const {
   if (!timing || timing->ReceiveHeadersEnd() == 0.0)
     return requestStart();
 
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->ReceiveHeadersEnd());
+  //sprintf(proc_buffer+strlen(proc_buffer), "responseStart %llu\n", ans);
+
   // FIXME: Response start needs to be the time of the first received byte.
   // However, the ResourceLoadTiming API currently only supports the time
   // the last header byte was received. For many responses with reasonable
   // sized cookies, the HTTP headers fit into a single packet so this time
   // is basically equivalent. But for some responses, particularly those with
   // headers larger than a single packet, this time will be too late.
-  return MonotonicTimeToIntegerMilliseconds(timing->ReceiveHeadersEnd());
+  return ans;
 }
 
 unsigned long long PerformanceTiming::responseEnd() const {
@@ -242,7 +317,11 @@ unsigned long long PerformanceTiming::responseEnd() const {
   if (!timing)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(timing->ResponseEnd());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->ResponseEnd());
+  //sprintf(proc_buffer+strlen(proc_buffer), "responseEnd %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::domLoading() const {
@@ -250,7 +329,11 @@ unsigned long long PerformanceTiming::domLoading() const {
   if (!timing)
     return fetchStart();
 
-  return MonotonicTimeToIntegerMilliseconds(timing->DomLoading());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->DomLoading());
+  //sprintf(proc_buffer+strlen(proc_buffer), "domLoading %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::domInteractive() const {
@@ -258,7 +341,11 @@ unsigned long long PerformanceTiming::domInteractive() const {
   if (!timing)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(timing->DomInteractive());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->DomInteractive());
+  //sprintf(proc_buffer+strlen(proc_buffer), "domInteractive %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::domContentLoadedEventStart() const {
@@ -266,8 +353,12 @@ unsigned long long PerformanceTiming::domContentLoadedEventStart() const {
   if (!timing)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(
       timing->DomContentLoadedEventStart());
+  //sprintf(proc_buffer+strlen(proc_buffer), "domContentLoadedEventStart %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::domContentLoadedEventEnd() const {
@@ -275,7 +366,11 @@ unsigned long long PerformanceTiming::domContentLoadedEventEnd() const {
   if (!timing)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(timing->DomContentLoadedEventEnd());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->DomContentLoadedEventEnd());
+  //sprintf(proc_buffer+strlen(proc_buffer), "domContentLoadedEventEnd %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::domComplete() const {
@@ -283,7 +378,11 @@ unsigned long long PerformanceTiming::domComplete() const {
   if (!timing)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(timing->DomComplete());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->DomComplete());
+  //sprintf(proc_buffer+strlen(proc_buffer), "domComplete %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::loadEventStart() const {
@@ -291,7 +390,11 @@ unsigned long long PerformanceTiming::loadEventStart() const {
   if (!timing)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(timing->LoadEventStart());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->LoadEventStart());
+  //sprintf(proc_buffer+strlen(proc_buffer), "loadEventStart %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::loadEventEnd() const {
@@ -299,7 +402,11 @@ unsigned long long PerformanceTiming::loadEventEnd() const {
   if (!timing)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(timing->LoadEventEnd());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->LoadEventEnd());
+  //sprintf(proc_buffer+strlen(proc_buffer), "loadEventEnd %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::FirstLayout() const {
@@ -307,7 +414,11 @@ unsigned long long PerformanceTiming::FirstLayout() const {
   if (!timing)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(timing->FirstLayout());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->FirstLayout());
+  //sprintf(proc_buffer+strlen(proc_buffer), "FirstLayout %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::FirstPaint() const {
@@ -315,7 +426,11 @@ unsigned long long PerformanceTiming::FirstPaint() const {
   if (!timing)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(timing->FirstPaint());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->FirstPaint());
+  //sprintf(proc_buffer+strlen(proc_buffer), "FirstPaint %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::FirstTextPaint() const {
@@ -323,7 +438,11 @@ unsigned long long PerformanceTiming::FirstTextPaint() const {
   if (!timing)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(timing->FirstTextPaint());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->FirstTextPaint());
+  //sprintf(proc_buffer+strlen(proc_buffer), "FirstTextPaint %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::FirstImagePaint() const {
@@ -331,7 +450,11 @@ unsigned long long PerformanceTiming::FirstImagePaint() const {
   if (!timing)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(timing->FirstImagePaint());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->FirstImagePaint());
+  //sprintf(proc_buffer+strlen(proc_buffer), "FirstImagePaint %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::FirstContentfulPaint() const {
@@ -339,7 +462,11 @@ unsigned long long PerformanceTiming::FirstContentfulPaint() const {
   if (!timing)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(timing->FirstContentfulPaint());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->FirstContentfulPaint());
+  //sprintf(proc_buffer+strlen(proc_buffer), "FirstContentfulPaint %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::FirstMeaningfulPaint() const {
@@ -347,7 +474,11 @@ unsigned long long PerformanceTiming::FirstMeaningfulPaint() const {
   if (!timing)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(timing->FirstMeaningfulPaint());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->FirstMeaningfulPaint());
+  //sprintf(proc_buffer+strlen(proc_buffer), "FirstMeaningfulPaint %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::PageInteractive() const {
@@ -355,8 +486,12 @@ unsigned long long PerformanceTiming::PageInteractive() const {
   if (!interactive_detector)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(
       interactive_detector->GetInteractiveTime());
+  //sprintf(proc_buffer+strlen(proc_buffer), "PageInteractive %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::PageInteractiveDetection() const {
@@ -364,8 +499,12 @@ unsigned long long PerformanceTiming::PageInteractiveDetection() const {
   if (!interactive_detector)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(
       interactive_detector->GetInteractiveDetectionTime());
+  //sprintf(proc_buffer+strlen(proc_buffer), "PageInteractiveDetection %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::FirstInputInvalidatingInteractive()
@@ -374,8 +513,12 @@ unsigned long long PerformanceTiming::FirstInputInvalidatingInteractive()
   if (!interactive_detector)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(
       interactive_detector->GetFirstInvalidatingInputTime());
+  //sprintf(proc_buffer+strlen(proc_buffer), "FirstInputInvalidatingInteractive %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::ParseStart() const {
@@ -383,7 +526,11 @@ unsigned long long PerformanceTiming::ParseStart() const {
   if (!timing)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(timing->ParserStart());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->ParserStart());
+  //sprintf(proc_buffer+strlen(proc_buffer), "ParseStart %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::ParseStop() const {
@@ -391,7 +538,11 @@ unsigned long long PerformanceTiming::ParseStop() const {
   if (!timing)
     return 0;
 
-  return MonotonicTimeToIntegerMilliseconds(timing->ParserStop());
+  // MOBED
+  unsigned long long ans = MonotonicTimeToIntegerMilliseconds(timing->ParserStop());
+  //sprintf(proc_buffer+strlen(proc_buffer), "ParseStop %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::ParseBlockedOnScriptLoadDuration() const {
@@ -399,7 +550,11 @@ unsigned long long PerformanceTiming::ParseBlockedOnScriptLoadDuration() const {
   if (!timing)
     return 0;
 
-  return ToIntegerMilliseconds(timing->ParserBlockedOnScriptLoadDuration());
+  // MOBED
+  unsigned long long ans = ToIntegerMilliseconds(timing->ParserBlockedOnScriptLoadDuration());
+  //sprintf(proc_buffer+strlen(proc_buffer), "ParseBlockedOnScriptLoadDuration %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long
@@ -408,8 +563,12 @@ PerformanceTiming::ParseBlockedOnScriptLoadFromDocumentWriteDuration() const {
   if (!timing)
     return 0;
 
-  return ToIntegerMilliseconds(
+  // MOBED
+  unsigned long long ans = ToIntegerMilliseconds(
       timing->ParserBlockedOnScriptLoadFromDocumentWriteDuration());
+  //sprintf(proc_buffer+strlen(proc_buffer), "ParseBlockedOnScriptLoadFromDocumentWriteDuration %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::ParseBlockedOnScriptExecutionDuration()
@@ -418,8 +577,12 @@ unsigned long long PerformanceTiming::ParseBlockedOnScriptExecutionDuration()
   if (!timing)
     return 0;
 
-  return ToIntegerMilliseconds(
+  // MOBED
+  unsigned long long ans = ToIntegerMilliseconds(
       timing->ParserBlockedOnScriptExecutionDuration());
+  //sprintf(proc_buffer+strlen(proc_buffer), "ParseBlockedOnScriptExecutionDuration %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long
@@ -429,8 +592,12 @@ PerformanceTiming::ParseBlockedOnScriptExecutionFromDocumentWriteDuration()
   if (!timing)
     return 0;
 
-  return ToIntegerMilliseconds(
+  // MOBED
+  unsigned long long ans = ToIntegerMilliseconds(
       timing->ParserBlockedOnScriptExecutionFromDocumentWriteDuration());
+  //sprintf(proc_buffer+strlen(proc_buffer), "ParseBlockedOnScriptExecutionFromDocumentWriteDuration %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::AuthorStyleSheetParseDurationBeforeFCP()
@@ -439,8 +606,12 @@ unsigned long long PerformanceTiming::AuthorStyleSheetParseDurationBeforeFCP()
   if (!timing)
     return 0;
 
-  return ToIntegerMilliseconds(
+  // MOBED
+  unsigned long long ans = ToIntegerMilliseconds(
       timing->AuthorStyleSheetParseDurationBeforeFCP());
+  //sprintf(proc_buffer+strlen(proc_buffer), "AuthorStyleSheetParseDurationBeforeFCP %llu\n", ans);
+
+  return ans;
 }
 
 unsigned long long PerformanceTiming::UpdateStyleDurationBeforeFCP() const {
@@ -448,7 +619,11 @@ unsigned long long PerformanceTiming::UpdateStyleDurationBeforeFCP() const {
   if (!timing)
     return 0;
 
-  return ToIntegerMilliseconds(timing->UpdateDurationBeforeFCP());
+  // MOBED
+  unsigned long long ans = ToIntegerMilliseconds(timing->UpdateDurationBeforeFCP());
+  //sprintf(proc_buffer+strlen(proc_buffer), "UpdateStyleDurationBeforeFCP %llu\n", ans);
+
+  return ans;
 }
 
 DocumentLoader* PerformanceTiming::GetDocumentLoader() const {
